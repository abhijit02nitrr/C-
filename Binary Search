#include <stdio.h>

// A recursive binary search function. It returns location of x in
// given array arr[l..r] is present, otherwise -1
int binarySearch(int arr[], int size, int x)
{
  int start = 0, end = size-1;
  while (start <= end)
  {
		int mid = (start + end) / 2;           //mid = start + (end - start) / 2 to avoid overflow incase addition values exceed integer range

		// If the element is present at the middle itself
		if (arr[mid] == x) return mid;

		// If element is smaller than mid, then it can only be present
		// in left subarray
		if (arr[mid] > x) 
     {
      end = mid - 1;
     } 

		// Else the element can only be present in right subarray
		else
     {
      start = mid + 1;
     } 
  }

// We reach here when element is not present in array
return -1;
}

int main(void)
{
int arr[] = {2, 3, 4, 10, 40};
int n = sizeof(arr)/ sizeof(arr[0]);
int x = 10;
int result = binarySearch(arr, n, x);
(result == -1)? printf("Element is not present in array")
				: printf("Element is present at index %d", result);
return 0;
}
